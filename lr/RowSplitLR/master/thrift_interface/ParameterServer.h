/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ParameterServer_H
#define ParameterServer_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "dist_lr_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ParameterServerIf {
 public:
  virtual ~ParameterServerIf() {}
  virtual void push_delta(const DeltaW& delta) = 0;
  virtual void pull_parameters(DeltaW& _return) = 0;
  virtual void pull_dataset(DataSet& _return) = 0;
  virtual bool connect_to_master(const HostInfo& host_info) = 0;
  virtual bool is_finish() = 0;
  virtual bool push_dataset(const DataSet& dataset) = 0;
};

class ParameterServerIfFactory {
 public:
  typedef ParameterServerIf Handler;

  virtual ~ParameterServerIfFactory() {}

  virtual ParameterServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ParameterServerIf* /* handler */) = 0;
};

class ParameterServerIfSingletonFactory : virtual public ParameterServerIfFactory {
 public:
  ParameterServerIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<ParameterServerIf>& iface) : iface_(iface) {}
  virtual ~ParameterServerIfSingletonFactory() {}

  virtual ParameterServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ParameterServerIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<ParameterServerIf> iface_;
};

class ParameterServerNull : virtual public ParameterServerIf {
 public:
  virtual ~ParameterServerNull() {}
  void push_delta(const DeltaW& /* delta */) {
    return;
  }
  void pull_parameters(DeltaW& /* _return */) {
    return;
  }
  void pull_dataset(DataSet& /* _return */) {
    return;
  }
  bool connect_to_master(const HostInfo& /* host_info */) {
    bool _return = false;
    return _return;
  }
  bool is_finish() {
    bool _return = false;
    return _return;
  }
  bool push_dataset(const DataSet& /* dataset */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _ParameterServer_push_delta_args__isset {
  _ParameterServer_push_delta_args__isset() : delta(false) {}
  bool delta :1;
} _ParameterServer_push_delta_args__isset;

class ParameterServer_push_delta_args {
 public:

  ParameterServer_push_delta_args(const ParameterServer_push_delta_args&);
  ParameterServer_push_delta_args& operator=(const ParameterServer_push_delta_args&);
  ParameterServer_push_delta_args() {
  }

  virtual ~ParameterServer_push_delta_args() throw();
  DeltaW delta;

  _ParameterServer_push_delta_args__isset __isset;

  void __set_delta(const DeltaW& val);

  bool operator == (const ParameterServer_push_delta_args & rhs) const
  {
    if (!(delta == rhs.delta))
      return false;
    return true;
  }
  bool operator != (const ParameterServer_push_delta_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParameterServer_push_delta_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParameterServer_push_delta_pargs {
 public:


  virtual ~ParameterServer_push_delta_pargs() throw();
  const DeltaW* delta;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParameterServer_push_delta_result {
 public:

  ParameterServer_push_delta_result(const ParameterServer_push_delta_result&);
  ParameterServer_push_delta_result& operator=(const ParameterServer_push_delta_result&);
  ParameterServer_push_delta_result() {
  }

  virtual ~ParameterServer_push_delta_result() throw();

  bool operator == (const ParameterServer_push_delta_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ParameterServer_push_delta_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParameterServer_push_delta_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParameterServer_push_delta_presult {
 public:


  virtual ~ParameterServer_push_delta_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ParameterServer_pull_parameters_args {
 public:

  ParameterServer_pull_parameters_args(const ParameterServer_pull_parameters_args&);
  ParameterServer_pull_parameters_args& operator=(const ParameterServer_pull_parameters_args&);
  ParameterServer_pull_parameters_args() {
  }

  virtual ~ParameterServer_pull_parameters_args() throw();

  bool operator == (const ParameterServer_pull_parameters_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ParameterServer_pull_parameters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParameterServer_pull_parameters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParameterServer_pull_parameters_pargs {
 public:


  virtual ~ParameterServer_pull_parameters_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParameterServer_pull_parameters_result__isset {
  _ParameterServer_pull_parameters_result__isset() : success(false) {}
  bool success :1;
} _ParameterServer_pull_parameters_result__isset;

class ParameterServer_pull_parameters_result {
 public:

  ParameterServer_pull_parameters_result(const ParameterServer_pull_parameters_result&);
  ParameterServer_pull_parameters_result& operator=(const ParameterServer_pull_parameters_result&);
  ParameterServer_pull_parameters_result() {
  }

  virtual ~ParameterServer_pull_parameters_result() throw();
  DeltaW success;

  _ParameterServer_pull_parameters_result__isset __isset;

  void __set_success(const DeltaW& val);

  bool operator == (const ParameterServer_pull_parameters_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ParameterServer_pull_parameters_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParameterServer_pull_parameters_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParameterServer_pull_parameters_presult__isset {
  _ParameterServer_pull_parameters_presult__isset() : success(false) {}
  bool success :1;
} _ParameterServer_pull_parameters_presult__isset;

class ParameterServer_pull_parameters_presult {
 public:


  virtual ~ParameterServer_pull_parameters_presult() throw();
  DeltaW* success;

  _ParameterServer_pull_parameters_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ParameterServer_pull_dataset_args {
 public:

  ParameterServer_pull_dataset_args(const ParameterServer_pull_dataset_args&);
  ParameterServer_pull_dataset_args& operator=(const ParameterServer_pull_dataset_args&);
  ParameterServer_pull_dataset_args() {
  }

  virtual ~ParameterServer_pull_dataset_args() throw();

  bool operator == (const ParameterServer_pull_dataset_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ParameterServer_pull_dataset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParameterServer_pull_dataset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParameterServer_pull_dataset_pargs {
 public:


  virtual ~ParameterServer_pull_dataset_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParameterServer_pull_dataset_result__isset {
  _ParameterServer_pull_dataset_result__isset() : success(false) {}
  bool success :1;
} _ParameterServer_pull_dataset_result__isset;

class ParameterServer_pull_dataset_result {
 public:

  ParameterServer_pull_dataset_result(const ParameterServer_pull_dataset_result&);
  ParameterServer_pull_dataset_result& operator=(const ParameterServer_pull_dataset_result&);
  ParameterServer_pull_dataset_result() {
  }

  virtual ~ParameterServer_pull_dataset_result() throw();
  DataSet success;

  _ParameterServer_pull_dataset_result__isset __isset;

  void __set_success(const DataSet& val);

  bool operator == (const ParameterServer_pull_dataset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ParameterServer_pull_dataset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParameterServer_pull_dataset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParameterServer_pull_dataset_presult__isset {
  _ParameterServer_pull_dataset_presult__isset() : success(false) {}
  bool success :1;
} _ParameterServer_pull_dataset_presult__isset;

class ParameterServer_pull_dataset_presult {
 public:


  virtual ~ParameterServer_pull_dataset_presult() throw();
  DataSet* success;

  _ParameterServer_pull_dataset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ParameterServer_connect_to_master_args__isset {
  _ParameterServer_connect_to_master_args__isset() : host_info(false) {}
  bool host_info :1;
} _ParameterServer_connect_to_master_args__isset;

class ParameterServer_connect_to_master_args {
 public:

  ParameterServer_connect_to_master_args(const ParameterServer_connect_to_master_args&);
  ParameterServer_connect_to_master_args& operator=(const ParameterServer_connect_to_master_args&);
  ParameterServer_connect_to_master_args() {
  }

  virtual ~ParameterServer_connect_to_master_args() throw();
  HostInfo host_info;

  _ParameterServer_connect_to_master_args__isset __isset;

  void __set_host_info(const HostInfo& val);

  bool operator == (const ParameterServer_connect_to_master_args & rhs) const
  {
    if (!(host_info == rhs.host_info))
      return false;
    return true;
  }
  bool operator != (const ParameterServer_connect_to_master_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParameterServer_connect_to_master_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParameterServer_connect_to_master_pargs {
 public:


  virtual ~ParameterServer_connect_to_master_pargs() throw();
  const HostInfo* host_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParameterServer_connect_to_master_result__isset {
  _ParameterServer_connect_to_master_result__isset() : success(false) {}
  bool success :1;
} _ParameterServer_connect_to_master_result__isset;

class ParameterServer_connect_to_master_result {
 public:

  ParameterServer_connect_to_master_result(const ParameterServer_connect_to_master_result&);
  ParameterServer_connect_to_master_result& operator=(const ParameterServer_connect_to_master_result&);
  ParameterServer_connect_to_master_result() : success(0) {
  }

  virtual ~ParameterServer_connect_to_master_result() throw();
  bool success;

  _ParameterServer_connect_to_master_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ParameterServer_connect_to_master_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ParameterServer_connect_to_master_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParameterServer_connect_to_master_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParameterServer_connect_to_master_presult__isset {
  _ParameterServer_connect_to_master_presult__isset() : success(false) {}
  bool success :1;
} _ParameterServer_connect_to_master_presult__isset;

class ParameterServer_connect_to_master_presult {
 public:


  virtual ~ParameterServer_connect_to_master_presult() throw();
  bool* success;

  _ParameterServer_connect_to_master_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ParameterServer_is_finish_args {
 public:

  ParameterServer_is_finish_args(const ParameterServer_is_finish_args&);
  ParameterServer_is_finish_args& operator=(const ParameterServer_is_finish_args&);
  ParameterServer_is_finish_args() {
  }

  virtual ~ParameterServer_is_finish_args() throw();

  bool operator == (const ParameterServer_is_finish_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ParameterServer_is_finish_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParameterServer_is_finish_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParameterServer_is_finish_pargs {
 public:


  virtual ~ParameterServer_is_finish_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParameterServer_is_finish_result__isset {
  _ParameterServer_is_finish_result__isset() : success(false) {}
  bool success :1;
} _ParameterServer_is_finish_result__isset;

class ParameterServer_is_finish_result {
 public:

  ParameterServer_is_finish_result(const ParameterServer_is_finish_result&);
  ParameterServer_is_finish_result& operator=(const ParameterServer_is_finish_result&);
  ParameterServer_is_finish_result() : success(0) {
  }

  virtual ~ParameterServer_is_finish_result() throw();
  bool success;

  _ParameterServer_is_finish_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ParameterServer_is_finish_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ParameterServer_is_finish_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParameterServer_is_finish_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParameterServer_is_finish_presult__isset {
  _ParameterServer_is_finish_presult__isset() : success(false) {}
  bool success :1;
} _ParameterServer_is_finish_presult__isset;

class ParameterServer_is_finish_presult {
 public:


  virtual ~ParameterServer_is_finish_presult() throw();
  bool* success;

  _ParameterServer_is_finish_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ParameterServer_push_dataset_args__isset {
  _ParameterServer_push_dataset_args__isset() : dataset(false) {}
  bool dataset :1;
} _ParameterServer_push_dataset_args__isset;

class ParameterServer_push_dataset_args {
 public:

  ParameterServer_push_dataset_args(const ParameterServer_push_dataset_args&);
  ParameterServer_push_dataset_args& operator=(const ParameterServer_push_dataset_args&);
  ParameterServer_push_dataset_args() {
  }

  virtual ~ParameterServer_push_dataset_args() throw();
  DataSet dataset;

  _ParameterServer_push_dataset_args__isset __isset;

  void __set_dataset(const DataSet& val);

  bool operator == (const ParameterServer_push_dataset_args & rhs) const
  {
    if (!(dataset == rhs.dataset))
      return false;
    return true;
  }
  bool operator != (const ParameterServer_push_dataset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParameterServer_push_dataset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParameterServer_push_dataset_pargs {
 public:


  virtual ~ParameterServer_push_dataset_pargs() throw();
  const DataSet* dataset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParameterServer_push_dataset_result__isset {
  _ParameterServer_push_dataset_result__isset() : success(false) {}
  bool success :1;
} _ParameterServer_push_dataset_result__isset;

class ParameterServer_push_dataset_result {
 public:

  ParameterServer_push_dataset_result(const ParameterServer_push_dataset_result&);
  ParameterServer_push_dataset_result& operator=(const ParameterServer_push_dataset_result&);
  ParameterServer_push_dataset_result() : success(0) {
  }

  virtual ~ParameterServer_push_dataset_result() throw();
  bool success;

  _ParameterServer_push_dataset_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ParameterServer_push_dataset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ParameterServer_push_dataset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParameterServer_push_dataset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParameterServer_push_dataset_presult__isset {
  _ParameterServer_push_dataset_presult__isset() : success(false) {}
  bool success :1;
} _ParameterServer_push_dataset_presult__isset;

class ParameterServer_push_dataset_presult {
 public:


  virtual ~ParameterServer_push_dataset_presult() throw();
  bool* success;

  _ParameterServer_push_dataset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ParameterServerClient : virtual public ParameterServerIf {
 public:
  ParameterServerClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ParameterServerClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void push_delta(const DeltaW& delta);
  void send_push_delta(const DeltaW& delta);
  void recv_push_delta();
  void pull_parameters(DeltaW& _return);
  void send_pull_parameters();
  void recv_pull_parameters(DeltaW& _return);
  void pull_dataset(DataSet& _return);
  void send_pull_dataset();
  void recv_pull_dataset(DataSet& _return);
  bool connect_to_master(const HostInfo& host_info);
  void send_connect_to_master(const HostInfo& host_info);
  bool recv_connect_to_master();
  bool is_finish();
  void send_is_finish();
  bool recv_is_finish();
  bool push_dataset(const DataSet& dataset);
  void send_push_dataset(const DataSet& dataset);
  bool recv_push_dataset();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ParameterServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<ParameterServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ParameterServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_push_delta(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pull_parameters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pull_dataset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_connect_to_master(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_is_finish(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_push_dataset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ParameterServerProcessor(::apache::thrift::stdcxx::shared_ptr<ParameterServerIf> iface) :
    iface_(iface) {
    processMap_["push_delta"] = &ParameterServerProcessor::process_push_delta;
    processMap_["pull_parameters"] = &ParameterServerProcessor::process_pull_parameters;
    processMap_["pull_dataset"] = &ParameterServerProcessor::process_pull_dataset;
    processMap_["connect_to_master"] = &ParameterServerProcessor::process_connect_to_master;
    processMap_["is_finish"] = &ParameterServerProcessor::process_is_finish;
    processMap_["push_dataset"] = &ParameterServerProcessor::process_push_dataset;
  }

  virtual ~ParameterServerProcessor() {}
};

class ParameterServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ParameterServerProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< ParameterServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< ParameterServerIfFactory > handlerFactory_;
};

class ParameterServerMultiface : virtual public ParameterServerIf {
 public:
  ParameterServerMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<ParameterServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ParameterServerMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<ParameterServerIf> > ifaces_;
  ParameterServerMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<ParameterServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void push_delta(const DeltaW& delta) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->push_delta(delta);
    }
    ifaces_[i]->push_delta(delta);
  }

  void pull_parameters(DeltaW& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pull_parameters(_return);
    }
    ifaces_[i]->pull_parameters(_return);
    return;
  }

  void pull_dataset(DataSet& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pull_dataset(_return);
    }
    ifaces_[i]->pull_dataset(_return);
    return;
  }

  bool connect_to_master(const HostInfo& host_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->connect_to_master(host_info);
    }
    return ifaces_[i]->connect_to_master(host_info);
  }

  bool is_finish() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->is_finish();
    }
    return ifaces_[i]->is_finish();
  }

  bool push_dataset(const DataSet& dataset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->push_dataset(dataset);
    }
    return ifaces_[i]->push_dataset(dataset);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ParameterServerConcurrentClient : virtual public ParameterServerIf {
 public:
  ParameterServerConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ParameterServerConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void push_delta(const DeltaW& delta);
  int32_t send_push_delta(const DeltaW& delta);
  void recv_push_delta(const int32_t seqid);
  void pull_parameters(DeltaW& _return);
  int32_t send_pull_parameters();
  void recv_pull_parameters(DeltaW& _return, const int32_t seqid);
  void pull_dataset(DataSet& _return);
  int32_t send_pull_dataset();
  void recv_pull_dataset(DataSet& _return, const int32_t seqid);
  bool connect_to_master(const HostInfo& host_info);
  int32_t send_connect_to_master(const HostInfo& host_info);
  bool recv_connect_to_master(const int32_t seqid);
  bool is_finish();
  int32_t send_is_finish();
  bool recv_is_finish(const int32_t seqid);
  bool push_dataset(const DataSet& dataset);
  int32_t send_push_dataset(const DataSet& dataset);
  bool recv_push_dataset(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
