/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef dist_lr_TYPES_H
#define dist_lr_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




class DeltaW;

class DataSet;

class HostInfo;

typedef struct _DeltaW__isset {
  _DeltaW__isset() : version(false), parameters(false) {}
  bool version :1;
  bool parameters :1;
} _DeltaW__isset;

class DeltaW : public virtual ::apache::thrift::TBase {
 public:

  DeltaW(const DeltaW&);
  DeltaW& operator=(const DeltaW&);
  DeltaW() : version(0) {
  }

  virtual ~DeltaW() throw();
  int32_t version;
  std::vector<double>  parameters;

  _DeltaW__isset __isset;

  void __set_version(const int32_t val);

  void __set_parameters(const std::vector<double> & val);

  bool operator == (const DeltaW & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(parameters == rhs.parameters))
      return false;
    return true;
  }
  bool operator != (const DeltaW &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeltaW & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeltaW &a, DeltaW &b);

std::ostream& operator<<(std::ostream& out, const DeltaW& obj);

typedef struct _DataSet__isset {
  _DataSet__isset() : sample_list(false), labels(false) {}
  bool sample_list :1;
  bool labels :1;
} _DataSet__isset;

class DataSet : public virtual ::apache::thrift::TBase {
 public:

  DataSet(const DataSet&);
  DataSet& operator=(const DataSet&);
  DataSet() {
  }

  virtual ~DataSet() throw();
  std::vector<std::vector<double> >  sample_list;
  std::vector<double>  labels;

  _DataSet__isset __isset;

  void __set_sample_list(const std::vector<std::vector<double> > & val);

  void __set_labels(const std::vector<double> & val);

  bool operator == (const DataSet & rhs) const
  {
    if (!(sample_list == rhs.sample_list))
      return false;
    if (!(labels == rhs.labels))
      return false;
    return true;
  }
  bool operator != (const DataSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DataSet &a, DataSet &b);

std::ostream& operator<<(std::ostream& out, const DataSet& obj);

typedef struct _HostInfo__isset {
  _HostInfo__isset() : host(false), port(false) {}
  bool host :1;
  bool port :1;
} _HostInfo__isset;

class HostInfo : public virtual ::apache::thrift::TBase {
 public:

  HostInfo(const HostInfo&);
  HostInfo& operator=(const HostInfo&);
  HostInfo() : host(), port(0) {
  }

  virtual ~HostInfo() throw();
  std::string host;
  int32_t port;

  _HostInfo__isset __isset;

  void __set_host(const std::string& val);

  void __set_port(const int32_t val);

  bool operator == (const HostInfo & rhs) const
  {
    if (!(host == rhs.host))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const HostInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HostInfo &a, HostInfo &b);

std::ostream& operator<<(std::ostream& out, const HostInfo& obj);



#endif
